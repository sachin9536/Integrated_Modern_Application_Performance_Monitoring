version: "3.9"

services:
  # ======================
  # Prometheus Monitoring
  # ======================
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - private_net

  # ======================
  # Monitoring Engine (Backend API)
  # ======================
  monitoring_engine:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: monitoring_engine
    ports:
      - "8000:8000"
    depends_on:
      - prometheus
    networks:
      - private_net
    environment:
      - GROQ_API_KEY=your_groq_api_key
      - GROQ_MODEL=llama3-8b-8192
      - PROMETHEUS_URL=http://prometheus:9090
      - SENDGRID_API_KEY=your_sendgrid_api_key
      - ALERT_EMAIL_FROM=your_email@example.com
      - ALERT_EMAIL_TO=your_email@example.com
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 30

  # ======================
  # (Optional) Frontend React App
  # ======================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - private_net
    depends_on:
      - monitoring_engine
    environment:
      - REACT_APP_API_URL=http://localhost:8000

  # ======================
  # Demo Services (profile: demo)
  # ======================
  service_alpha:
    build:
      context: .
      dockerfile: ./services/service_alpha.Dockerfile
    container_name: service_alpha
    ports:
      - "9101:8000"
    networks:
      - private_net
    profiles: ["demo"]

  service_beta:
    build:
      context: .
      dockerfile: ./services/service_beta.Dockerfile
    container_name: service_beta
    ports:
      - "9102:8000"
    networks:
      - private_net
    profiles: ["demo"]

  service_gamma:
    build:
      context: .
      dockerfile: ./services/service_gamma.Dockerfile
    container_name: service_gamma
    ports:
      - "9103:8000"
    networks:
      - private_net
    profiles: ["demo"]

  dummy_service:
    build:
      context: .
      dockerfile: ./services/dummy_service.Dockerfile
    container_name: dummy_service
    ports:
      - "9104:9000"
    networks:
      - private_net
    profiles: ["demo"]

  # service_delta:
  #   build:
  #     context: .
  #     dockerfile: ./services/service_delta.Dockerfile
  #   container_name: service_delta
  #   ports:
  #     - "9105:9400"
  #   networks:
  #     - private_net
  #   profiles: ["demo"]

  controller:
    build:
      context: .
      dockerfile: Dockerfile.controller
    container_name: controller
    depends_on:
      - service_alpha
      - service_beta
      - service_gamma
      - dummy_service
      # - service_delta
    volumes:
      - ./logs:/app/logs
    networks:
      - private_net
    profiles: ["demo"]

  # Auto-register demo services (runs once in demo mode)
  register_demo_services:
    image: python:3.11-slim
    depends_on:
      monitoring_engine:
        condition: service_healthy
      service_alpha:
        condition: service_started
      service_beta:
        condition: service_started
      service_gamma:
        condition: service_started
      dummy_service:
        condition: service_started
      # service_delta:
      #   condition: service_started
    volumes:
      - ./register_demo_services.py:/register_demo_services.py:ro
    environment:
      - DEMO_MODE=1
      - API_URL=http://monitoring_engine:8000
    command: sh -c "pip install requests && python /register_demo_services.py"
    profiles: ["demo"]
    restart: "no"

networks:
  private_net:
    driver: bridge
# Usage:
#   docker compose up                # Production mode (monitoring only)
#   docker compose --profile demo up # Demo mode (with sample services and traffic generator)
